q()
n
a <- kmeans(dat$g)
ls()
boxplot(fit3$beta)
ls()
boxplot(fit4$beta)
boxplot(fit4$beta)
boxplot(fit5$beta)
dim(dat$g)
dim(na.omit(dat$g))
str(dat)
boxplot(dat$g)
boxplot(dat$g[dat$ind,])
ls()
q()
n
rep.gns
dat.g[1,]
dat.g[1,] - tmp$centers[,1]
dat.g[1,] - tmp$centers[1,]
tmp$centers[1,]
dat.g[1,]
tmp$centers[1,]
dat.g[1,] - tmp$centers[1,]
sum(dat.g[1,] - tmp$centers[1,])
rep.gns
rep.gns
unique(rep.gns)
length(unique(rep.gns))
dat.g[rep.gns,]
strsplit()
strsplit('a')
q()
n
q()
n
q()
n
q()
n
list('e1'=1, 'e2'=2 )
a <- list('e1'=1, 'e2'=2 )
a
a[[e1]] <- 10
a[['e1']] <- 10
a
a <- list(a, 'e5'=5)
a
rm a
rm(a)
a <- list('e1'=1, 'e2'=2 )
c(list(f=20), a)
a <- c(list(f=20), a)
a$f
a <- c(list(g=1:20), a)
a
str(cl.kmns)
str(cl.kmns$centers)
rep.gns
 dat.g[rep.gns]
 dat.g[rep.gns,]
names( dat.g[rep.gns,])
rownames( dat.g[rep.gns,])
rownames(rep.gns) <- rownames( dat.g[rep.gns,])
rep.gns
colnames(rep.gns) <- rownames( dat.g[rep.gns,])
str9rep.gns
 str(rep.gns)
names(rep.gns) <- rownames( dat.g[rep.gns,])
rep.gns
rep.gns[1]
q()
n
str(cl.kms)
str(cl.kmns)
rep.gns
dat.g[rep.gns,]
?matplot
cl.kmns$cluster
sample
sample(10,10)
sample(20,10)
matrix(sample(20,10), 5, 2)
names(dat.g)[1]
rownames(dat.g)[1]
sample(rownames(dat.g)[-rep.gns])
sample(rownames(dat.g)[-rep.gns],10)
length(rownames(dat.g)[-rep.gns])
length(rownames(dat.g))
?matrix
?matrix
getwd()
rust.clustering(dat.g, 10:11, km.k=7)
rownames(dat.g[rep.gns,])
rep.gns <- rownames(dat.g[rep.gns,])
rep.gns
length(rownames(dat.g)[-rep.gns])
length(rownames(dat.g)[-c(rep.gns)])
length(rownames(dat.g[-c(rep.gns)]))
length(rownames(dat.g[-rep.gns]))
length(rownames(dat.g[-rep.gns,]))
rep.gns
dat.g[-rep.gns)
dat.g[-rep.gns,]
size(dat.g[-(rep.gns),])
dat.g[(rep.gns),]
length(rownames(dat.g[-rep.gns,]))
plot(dat.g)
plot(t,dat.g)
t
?t
plot(dat$t,dat.g)
length(rownames(dat.g[!%in$ rep.gns,]))
length(rownames(dat.g[!rownames(dat.g) %in$ rep.gns,]))
str(rownames(dat.g[!rownames(dat.g) %in$ rep.gns,]))
str(rownames(dat.g[!rownames(dat.g) %in$ rep.gns,]))%
str(rownames(dat.g[!rownames(dat.g) %in% rep.gns,]))
length(rownames(dat.g[!rownames(dat.g) %in% rep.gns,]))
length(rownames(dat.g[!%in% rep.gns,]))
rust.clustering(dat.g, 10:11, km.k=7)
source("func_rust.r")
 tmp <- rust.clustering(dat.g, 10:11, km.k=7)
str(tmp)
names(tmp$rand.sample)
names(tmp$rand.sample) <- paste('genes',10:11)
names(tmp$rand.sample)
tmp$rand.sample['genes 10']
q()
n
str(dat.g)
str(dat$t)
str(cl.kmns$centers)
tmp <- rust.clustering(dat.t, km.k=6)
tmp <- rust.clustering(dat.g, km.k=6)
str(tmp)
tmp <- rust.clustering(dat.g, km.k=6, rSmpl.size=c(100, 10000))
rownames(gData[!rownames(gData) %in% rep.gns,])
gData <- dat.g
str(rownames(gData[!rownames(gData) %in% rep.gns,]))
tmp <- rust.clustering(dat.g, km.k=6, rSmpl.size=c(100, 1000))
?sample
?sample
source('func_rust.r')
tmp <- rust.clustering(dat.g, km.k=6, rSmpl.size=c(100, 1000))
source('func_rust.r')
tmp <- rust.clustering(dat.g, km.k=6, rSmpl.size=c(100, 1000))
str(rep.gns)
iR=1
a <- sample(x=rownames(gData[!rownames(gData) %in% rep.gns,])

                                             ,size=rSmpl.size[iR]*n.randSmpl) 
str(a)
Q
?rep
rep.int(sample(1:10, 5), 10)
matrix(rep.int(sample(1:10, 5), 10), 5,10)
matrix(rep.int(sample(1:10, 5), 10), 10,5)
sample(1:10, 5)
rep(sample(1:10, 5), 5)
replicate(5,sample(1:10, 5))
source('func_rust.r')
rm(gData)
tmp <- rust.clustering(dat.g, km.k=6, rSmpl.size=c(100, 1000))
str(tmp)
hist(tmp$clst$cluster[tmp$rnd.sample[[1]]])
boxplot(tmp$clst$cluster[tmp$rnd.sample[[1]]])
plot(tmp$clst$cluster[tmp$rnd.sample[[1]]])
hist(tmp$clst$cluster[tmp$rnd.sample[[1]]])
hist(tmp$clst$cluster[tmp$rnd.sample[[2]]])
hist(tmp$clst$cluster[tmp$rnd.sample[[1]][1,]])
sum(tmp$rnd.sample[[1]][1,])
summary(tmp$rnd.sample[[1]][1,])
table(tmp$rnd.sample[[1]][1,])
tmp$rnd.sample[[1]][1,]
sum(tmp$clst$cluster[tmp$rnd.sample[[1]][1,]])
summary(tmp$clst$cluster[tmp$rnd.sample[[1]][1,]])
table(tmp$clst$cluster[tmp$rnd.sample[[1]][1,]])
sum(table(tmp$clst$cluster[tmp$rnd.sample[[1]][1,]]))
tmp <- rust.clustering(dat.g, km.k=6, rSmpl.size=c(100, 1000), n.randSmpl=10)
str(tmp)
ls()
str(cl.fit)
cl.fit$fit$w
cl.fit$w
1/cl.fit$w
cl.fit$beta
str(cl)
str(cl$rnd.sample)
nrow(cl$rnd.sample[[1]])
Q
str(tmp)
length(tmp$rnd.sample)
as.factor(tmp$rnd.sample[[1]])
str(as.factor(tmp$rnd.sample[[1]]))
summary(as.factor(tmp$rnd.sample[[1]]))
str(as.factor(tmp$rnd.sample[[1]]))
str(as.frame(tmp$rnd.sample[[1]]))
str(data.frame(tmp$rnd.sample[[1]]))
a <- (data.frame(tmp$rnd.sample[[1]]))
a[1,]
a[,1]
data.frame(a$X1)
ls
ls()
str(smpl)
lapply(smpl, rust.fitGvec(x))
lapply(smpl, rust.fitGvec)
Q
tmp
save.image()
q()
n
q()
n
data.frame(c(1,2,4,5))
as.list(c(1,2,4,5))
raw.dat[,'HSP90']
str(raw.dat)
g.raw <- as.matrix(raw.dat[2:21,])
str(g.raw)
str(raw.dat[2:21,])
str(raw.dat[1,])
str(raw.dat[[2:21]])
str(raw.dat[[2]])
str(raw.dat[1,])
str(raw.dat[2:21])
g.raw <- as.matrix(raw.dat[2:21])
str(g.raw)
rownames(g.raw) <- raw.dat$external_gene_id
plot(g.raw['HSP90',])
plot(g.raw['HSPC2',])
plot(g.raw['HSPCB',])
plot(g.raw['HSP90B',])
plot(g.raw['HSP84',])
plot(g.raw['D6S182',])
plot(g.raw['A1BG',])
plot(g.raw['HGNC',])
plot(g.raw['HSP90AB1',])
plot(g.raw['HSP90AB1',], ylim=c(min(g.raw), max(g.raw)))
lines(g.raw['SARC',])
lines(g.raw['SRC',], col='red')
lines(g.raw['CD44',], col='red')
lines(g.raw['CD44',], col='red')
?min
min(g.raw)
min(g.raw[g.raw>0])
q()
n
w
ls()
rust.fit.nStt(gData=gData[gVec[[1]],], tData=tData, lambda=0.1, n.states=3, fit.as=fit.as, w=w, fix.w=TRUE)
rust.fit.nStt(gData=gData[gVec[[c(1,2)]],], tData=tData, lambda=0.1, n.states=3, fit.as=fit.as, w=w, fix.w=TRUE)
gData[gVec[[1]],]
gData[gVec[[2]],]
gData[gVec[[1:2]],]
gData[gVec[1:2],]
gData[gVec[c(1,2)],]
gVec[c(1,2)]
gData[unlist(gVec[c(1,2)]),]
rust.fit.nStt(gData=gData[unlist(gVec[[c(1,2)]]),], tData=tData, lambda=0.1, n.states=3, fit.as=fit.as, w=w, fix.w=TRUE)
rust.fit.nStt(gData=gData[unlist(gVec[c(1,2)]),], tData=tData, lambda=0.1, n.states=3, fit.as=fit.as, w=w, fix.w=TRUE)
rust.fit.nStt(gData=gData[unlist(gVec[c(1,2)]),], tData=tData, lambda=0.1, n.states=3, fit.as=fit.as, wFit=w, fix.w=TRUE)
rust.fit.nStt(gData=gData[unlist(gVec[c(1,2)]),], tData=tData, lambda=0.1, n.states=3, fit.as=fit.as, w=w, fix.w=TRUE)
source('func_rust.r')
rust.fit.nStt(gData=gData[unlist(gVec[c(1,2)]),], tData=tData, lambda=0.1, n.states=3, fit.as=fit.as, w=w, fix.w=TRUE)
rust.fit.nStt(gData=gData[unlist(gVec[[1]]),], tData=tData, lambda=0.1, n.states=3, fit.as=fit.as, w=w, fix.w=TRUE)
Q
q()
n
q()
n
P
q()
n
n
q()
Q
ls()
w
j
gVec
gData[gVec[[1:2]],]
gData[gVec[c(1:2)],]
gVec[[1:2]]
gVec[[c(1,2)]]
gVec[[1)]]
gVec[[1]]
gVec[[1:2]]
gVec[c(1,2)]
unlist(gVec[c(1,2)])
gData[ unlist(gVec[c(1,2)]),
]
cl.fit <- rust.fit.kStt(gData=gData[ unlist(gVec[c(1,2)]),], tData=tData, lambad=0.01, n.states=3, fit.as=fit.as, w=w, fix.w=TRUE)
cl.fit <- rust.fit.kStt(gData=gData[ unlist(gVec[c(1,2)]),], tData=tData, lambda=0.01, n.states=3, fit.as=fit.as, w=w, fix.w=TRUE)
cl.fit <- rust.fit.kStt(gData=gData[ unlist(gVec[c(1)]),], tData=tData, lambda=0.01, n.states=3, fit.as=fit.as, w=w, fix.w=TRUE)
Q
open nlminb
nlminb
ls()
save(w, gData[gVec[c(1,2)],], file='../data/tmpW.rdat')
gVec[c(1,2)],]
gVec[c(1,2)]
save(w, gData[unlist(gVec[c(1,2)]),], file='../data/tmpW.rdat')
getwd()
g.tmp <- gData[unlist(gVec[c(1,2)]),]
save(w, g.tmp, file='../data/tmpW.rdat')
Q
load('../data/tmpW.rdat')
ls()
w
g.tmp
x0
p
n
Q
obj
rss
bic
bicSc
q()
Q
Q
str(tmp)
?mclapply
       mclapply(1:30, rnorm, mc.preschedule=FALSE, mc.set.seed=FALSE)
str(tmp)
rss
betas
fit.gnes[[il]]$beta
fit.gnes[[1]]$beta
betas
rss
betas
rss
ls9)
ls()
w
ls9)
ls()
str(dat)
?calcNormFactors
str(dat)
str(tmp)
?calcNormFactors
tmp
?matplot
rownames(nF)
colnames(nF)
example(matplot)
head(diamonds)
q()
n
10
tmp <- vector('list', 2)
tmp
tmp[[1]] <- rbind(tmp[[1]], 1)
tmp
2
tmp[[1]] <- rbind(tmp[[1]], 2)
tmp
par
prl
l
ls()
tmp
tmp.a <- vector('list', 2)
tmp[[2]] <- tmp.a
tmp
tmp[[2]]
tmp[[2]][[1]]
str(cl)
Q
Q
ls()
betas
gName
Q
ls()
rss.v
q()
Q
library(mclust)
Mclust(dat$g[dat$ind,])
q()
n
ls()
str(cl.fit)
cl.fit$convergence
cl.fit$fit$convergence
Q
str9cl.fit)
str(cl.fit)
Q
str(cl.fit)
q
Q
tmp$ms.cl$2
tmp$ms.cl$2
tmp$ms.cl[[1]]
tmp$ms.cl
str(tmp)
tmp$ms.cl$stt2
tmp$ms.cl$stt2[[1]]
str(tmp$ms.cl$stt2)
tmp$ms.cl
tmp$ms.cl$stt3
tmp$ms.cl$stt3[[1]]
str(tmp)
tmp$ms.cl$stt2
plot(tmp$ms.cl$stt2$bic[1,])
plot(tmp$ms.cl$stt2$rss[1,])
tmp
plot(tmp$ms.cl$bic)
tmp$ms.cl$bic
plot(tmp$ms.cl$bic)
plot(tmp$ms.cl$bic[1,])
plot(tmp$ms.cl$bic[1,])
plot(tmp$ms.cl$bic[1,]t='b')
plot(tmp$ms.cl$bic[1,],t='b')
plot(tmp$ms.cl$rss[1,],t='b')
plot(tmp$ms.cl$rss[1,],t='b')
plot(tmp$ms.cl$bic[1,],t='b')
1200/(200*10)
1200/(200*14)
1300/(200*14)
tmp$ms.cl$bic[1,]/(200*14)
plot(tmp$ms.cl$bic[1,]/(200*14))
plot(tmp$ms.cl$bic[1,]/(200*14),t='b')
plot(tmp$ms.cl$rss[1,]/(200*14),t='b')
q()
n
